Chapter(www.stxt.info/book.stxt):

Metadata:
	Title: Capítulo 7: Equivalencias e Internacionalización
	Description:
		Internacionalización de documentos. También explicamos cómo documentos
		distintos pueden tratarse de forma equivalente. 
	Author: Joan Costa Mombiela
	Last_modif: 2013-03-01

Nav:
	Prev: 06
	Next: 08
	
Title:
	Capítulo 7: Equivalencias e Internacionalización (I18N)
	
text:
	Este capítulo puede parecer complejo al principio,
	pero no es así. Veréis que es algo muy natural.
	De hecho, pensaréis... ¿Por qué no lo hemos usado antes?
	
	La mejor forma de trabajar es empezar por un ejemplo, 
	y después entraremos en el tema de una forma más formal.

h1:	
	I18N. Un ejemplo
	
text:	
	Vamos a hacer un ejemplo sencillo.
	Por ejemplo un documento de una actriz/actor:
	
code:
	Actress (www.example.com/actress.stxt):
		Name: Sheyla Queen
		Birthday: 2/21/1979
		Filmography:
			Film:
				Title: The last thing
				Year: 1992
			Film:
				Title: Garden in red
				Year: 1993
	
text:
	La gramática es bastante sencilla:
	
code:
	Node Definition: 
		Name: actor
		Alias: acress
		Type: NODE
		Child:
			Node: name 
			Num: 1
		Child:
			Node: birthday 
			Num: 1
		Child:
			Node: filmography 
			Num: 1
	Node Definition:
		Name: filmography
		type: NODE
		Child:
			Node: film
			Num: +
	Node Definition:
		Name: film
		Type: NODE
		Child:
			Type: title
			Num: 1
		Child:
			Type: year
			Num: 1
	Node Definition:
		Name: name
		Type: TEXT
	Node Definition:
		Name: birthday
		Type: TEXT
	Node Definition:
		Name: title
		Type: TEXT
	Node Definition:
		Name: year
		Type: TEXT
	
text:
	Ahora, imaginemos que queremos la misma información en castellano,
	pero en vez de traducir todo, hacemos una gramática casi igual,
	pero con alias en castellano.
	
	La gramática quedaría como:
	
code:
	Node Definition: 
		Name: actor
		Alias: acress
		Alias: actriz
		Type: NODE
		Child:
			Type: name 
			Num: 1
		Child:
			Type: birthday 
			Num: 1
		Child:
			Type: filmography 
			Num: 1
	Node Definition:
		Name: filmography
		Alias: Filmografía
		type: NODE
		Child:
			Type: film
			Num: +
	Node Definition:
		Name: film
		Alias: película
		Type: NODE
		Child:
			Type: title
			Num: 1
		Child:
			Type: year
			Num: 1
	Node Definition:
		Name: name
		Alias: Nombre
		Type: TEXT
	Node Definition:
		Name: birthday
		Alias: Fecha de nacimiento
		Type: TEXT
	Node Definition:
		Name: title
		Alias: Título
		Type: TEXT
	Node Definition:
		Name: year
		Alias: Año
		Type: TEXT
	
text:
	Y el documento podría quedar de la siguiente forma:
	
code:
	Actriz (www.example.com/actress_es.stxt):
		Nombre: Sheyla Queen
		Fecha de nacimiento: 2/21/1979
		Filmografía:
			Película:
				Título: The last thing
				Año: 1992
			Película:
				Título: Garden in red
				Año: 1993
	
assert:
	¡Ya tenemos un documento igual pero en perfecto castellano!
	
text:	
	Además, estos documentos tienen algo en común:
	
assert:
	¡La forma compactada es la misma!
	\\(excepto el Namespace)
		
text:		
	Bien, esto es algo muy importante, ya que para traducir de uno a otro 
	sólo es necesario pasar a forma compactada, cambiar el namespace y... ¡ya está!
	El documento es exactamente igual.
	
	Éste es un caso de gramáticas equivalentes. Aquí no hablaremos de internacionalización,
	ya que buscamos algo incluso más genérico que eso. Buscamos relaciones entre lenguajes,
	y de esto irán los siguientes apartados.
	
	Pero una aplicación muy interesante es la que acabamos de hacer.
	
assert:
	Una buena forma de internacionalizar es crear una gramática equivalente en otro idioma.
				
h1:			
	Equivalencias (**)
	
text:
	Vamos a hablar de relaciones que se pueden hacer entre distintas gramáticas,
	y de sus posibles transformaciones. Realmente este tema podría dar mucho más de sí,
	pero sólo vamos a reflexionar un poco, y mostrar ciertas cosas.
		 
h2:  
	Gramáticas equivalentes (**)
	
text:
	Decimos que dos gramáticas son equivalentes si cualquier documento
	tiene la misma forma compactada; a excepción del namespace del primer nodo.
	
	Este es el ejemplo anterior de internacionalización,
	en el que hacíamos que la forma compactada fuera la misma.
	
	De otra forma, dos gramáticas son equivalentes si tienen
	los mismos nombres canónicos, y una estructura de hijos iguales.
	
	Una de las ventajas de esto es que la internacionalización
	es casi directa, como hemos visto en el apartado anterior.
	
	Esto es muy útil, ya que podemos decir que los lenguajes
	son prácticamente iguales. Esto permitiría hacer futuras transformaciones,
	y todo una serie de trabajos automatizados de una forma muy sencilla.
	
h2:
	Gramáticas transformables (o convertibles) (**)
	
assert:
	Una gramática B es transformable en A si al hacer la forma compactada,
	sólo cambiando el namespace del nodo original de B,
	se puede parsear por A. Es decir, que los canónicos de B
	son o bien canónicos de A o alias de A.
	  	
text:	  
	Creo que la definición está bastante clara, es como decir que es
	//como un subconjunto de otro lenguaje más grande//.
	
	Otra aplicación podría ser crear puentes entre diferentes documentos.
	Se puede crear un tipo de documento que sirva como transformador de un lenguaje a otro.
	Esto se haría combinando alias de uno con nombres canónicos,
	de forma que la transformación fuera casi directa.  
	
	Nota: La compactada de éste se puede leer por el namespace de destino (de forma completa),
	aunque no tiene por que ser la forma inversa. Es como una forma de inclusión.
	
	Una reflexión: Las transformables son una forma fácil de pasar de un lenguaje a otro.	
	Si fuera XML, ¡sería como tener un XSLT ya implementado!
	
# Creo que sería interesante pensar también en transformaciones
# a partir de la forma compactada. Al cambiar el nombre del nodo y el nivel 
# se puede llegar a una estructura muy distinta de la original,
# incluso con la posibilidad de eliminar también líneas si no son válidas
# en la gramática de destino.
	
# Nota: Creo que éste es un tema demasiado complejo para abordarlo en estos momentos, 
# pero como punto de partida es muy interesante. 
	
h2:
	Extensiones (**)
	
text:
	Las extensiones son como las gramáticas transformables, pero miradas desde la gramática de destino.
	
assert:
	Una gramática A es una extensión de B, si al hacer la forma compactada de B,
	sólo cambiando el namespace del nodo original, se puede parsear por A.
	Es decir, que los canónicos de B son o bien canónicos de A o alias de A.
	
text:
	Esto nos dice que A es una ampliación de B. Aquí lo que hacemos es //ampliar la funcionalidad de B//,
	pero permitimos la compatibilidad a la inversa. Es decir, que si tenemos documentos de B también puedan usarse.
	
	
	
