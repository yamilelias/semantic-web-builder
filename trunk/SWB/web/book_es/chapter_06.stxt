Chapter(www.stxt.info/book.stxt):

Metadata:
	Title: Capítulo 6: Tutorial Avanzado
	Description:
		Tutorial Avanzado de STxT. Inicialmente se hace un resumen de STxT, gramáticas y compactación.
		A continuación se describen aspectos más avanzados de STxT.
	Author: Joan Costa Mombiela
	Last_modif: 2013-03-01

Nav:
	Prev: 05
	Next: 07
	
title:
	Capítulo 6: Tutorial Avanzado (*)

text:	
	Este capítulo será parecido al tutorial del capítulo 3, pero más directo en todo su funcionamiento,
	y se explicarán todas las complejidades reales.
	
	**¡No os lo perdáis!**	
h1:
	Recordatorio de STxT
	
h2:
	¿Qué es STxT?
text:
	Un documento STxT consiste en un conjunto de nodos jerárquicos, 
	y la estructura de cada nodo está definida en su namespace correspondiente.
	Esta estructura se consigue gracias a la identación (tabuladores o espacios), 
	lo que dota al documento de una forma visual reconocible 
	por humanos y por máquinas indistintamente.
	
	Ejemplo:
	
code:
	Reserva (miempresa.example.demo/reserva.stxt):
	
	Referencia: 093a2da1-q345-739r-ba5d-pqff98fe8j7d
	Fecha y hora: 2001-11-29 13:20:00
	Pasajero:
		Nombre: John
		Primer apellido: Smith
		Segundo apellido: Adams
	Itinerario:
		Ida:
			Salida: Nueva York
			Llegada: Los Angeles
			Fecha Salida: 2001-12-14
			Hora Salida: Última hora de la tarde
			Preferencia Asiento: pasillo
		Vuelta:
	    	Salida: Los Angeles
	    	Llegada: Nueva York
	    	Fecha Salida: 2001-12-20
	    	Hora Salida: media-mañana
	Alojamiento:
		Preferencia:ninguna
	Observaciones:
		Este pasajero ha contratado los servicios 
		especiales de privacidad, por lo que en 
		caso de tener disponibilidad se recomienda
		permitirle el acceso a la zona vip.
	
text:
	Un documento STxT sólo puede tener un nodo principal, 
	por lo que hace innecesaria la identación de sus nodos hijos directos.
	Además, es obligatorio especificar el namespace de este nodo principal, 
	ya que a partir de él los demás nodos quedarán perfectamente definidos.
	
	A partir de los distintos namespaces se puede construir toda
	la gramática y estructura del documento; la cual se tiene que cumplir
	para considerar un documento correcto.
	
h2:
	Gramáticas
	
text:
	La gramática de un documento define como son los diferentes nodos del documento,
	a qué namespace pertenecen, y cómo son sus hijos (o subnodos).
	
	La definición de los namespaces se hace en documentos STXT,
	y éstos deben tener la siguiente definición:
	
code:
	Namespace Definition(www.semantictext.info/namespace.stxt):
	
	Node Definition:
		Name:
		Alias:
		Type:
		Description:
		Child:
			Node:
			Namespace:
			Num:
	
text:
	* **Name** especifica el nombre del nodo (en ese namespace). También es conocido como //Nombre Canónico//.
	* **Alias** son sinónimos del nombre, que pueden usarse indistintamente en su lugar.
	* **Type** es el tipo de nodo, y puede tener los siguientes valores:
	** **NODE**: Nodo contenedor de otros nodos
	** **TEXT**: Nodo con contenido texto
	** **URL**: Nodo con una URL absoluta
	** NATURAL: Nodo con un número natural
	** INTEGER: Nodo con un número entero
	** RATIONAL: Nodo con un número racional
	** NUMBER: Nodo numérico
	** BINARY: Nodo binario
	** HEXADECIMAL: Nodo con contenido hexadecimal
	** BASE64: Nodo con contenido en Base64
	** BOOLEAN: Nodo con contenido boleano
	* **Description** se puede informar para tener una descripción de este nodo.
	* Un nodo, en caso de ser de tipo NODE, puede tener uno o varios hijos (subnodos), y deben especificarse mediante **child**:
	** **Node**: Nombre del nodo hijo.
	** **Namespace**: si el hijo es de un namespace diferente al de la definición se especificará aquí.
	** **Num**: especifica cuántos elementos de este nodo pueden aparecer:
	*** *: Significa que puede haber un número indeterminado de estos hijos
	*** ?: Puede haber 1 o 0 de estos hijos
	*** +: Tiene que haber al menos 1
	*** número: Tiene que haber un número exacto de estos hijos
	
	//Name// y //alias// no pueden repetirse en todo el namespace.
	Los nodos hijos también tienen que quedar perfectamente	definidos,
	sin permitir ambigüedad sobre el namespace al que pertenecen.
	
h2:
	Compactación
	
text:
	Un documento STxT puede compactarse para mostrar explícitamente los niveles
	y ser más rápido de parsear por las máquinas. También permite ganar espacio,
	ya que los tabuladores y espacios iniciales	son substituidos por números.
	
	Además, hay que usar el nombre canónico en lugar de los alias. En caso
	de no usar el nombre canónico hablaríamos de documentos //semicompactados//.
	
	En nuestro ejemplo anterior, el documento compactado tendría la siguiente forma:
	
code:
	Reserva(miempresa.example.demo/reserva.stxt):
	1:Referencia:093a2da1-q345-739r-ba5d-pqff98fe8j7d
	1:Fecha Y Hora:2001-11-29 13:20:00
	1:Pasajero:
	2:Nombre:John
	2:Primer apellido: Smith
	2:Segundo apellido: Adams
	1:Itinerario:
	2:Ida:
	3:Salida: Nueva York
	3:Llegada: Los Angeles
	3:Fecha Salida: 2001-12-14
	3:Hora Salida: Última hora de la tarde
	3:Preferencia Asiento: pasillo
	2:Vuelta:
	3:Salida: Los Angeles
	3:Llegada:Nueva York
	3:Fecha Salida:2001-12-20
	3:Hora Salida:media-mañana
	1:Alojamiento:
	2:Preferencia:ninguna
	1:Observaciones:
	2:Este pasajero ha contratado los servicios 
	2:especiales de privacidad, por lo que en 
	2:caso de tener disponibilidad se recomienda
	2:permitirle el acceso a la zona //omega//.
	
h1:
	Sutilezas del lenguaje
	
h2:
	Restricciones en los nombres de los nodos
	
text:
	Los nombres de los nodos pueden ser como queramos... ¡o casi!
	Sólo hay unas pequeñas restricciones:
		
	* No puede tener ninguno de los 3 siguientes caracteres:
	** caracter dos puntos: ':'
	** caracter abrir paréntesis: '('
	** caracter cerrar paréntesis: ')'
	* El nombre no puede ser solamente numérico o de otra forma se podría confundir con una linea compactada.
	
	Por cierto:
	
assert:
	Se permiten espacios en los nombres. \\ 
	¿Por qué no? ¿Para parecer informáticos? \\
	Los tiempos están cambiando :-D

assert:	
	La primera línea será de la forma:\\
	nombre del campo (nombre_namespace) + ':'
	
assert:	
	Todas las demás líneas serán de la forma:\\
	tabuladores o espacios + nombre del campo + ':'\\
	[+ contenido del campo si es básico]
			 
h2:
	Case insensitive
	
assert:
	**Los identificadores son CASE-INSENSITIVE!**
	
text:
	Vamos a explicar una realidad, que parece que nadie se atreve a decir: 
	
	En todos los lenguajes que son Case-Sensitive, nadie en el mundo (en su sano juicio)
	ha hecho nunca un documento o programa que sólo se diferencie por mayúsculas y minúsculas.
	¿Por qué? Porque es absurdo. Reconozcámoslo. Sólo tiene como consecuencia ser una fuente de errores,
	y no tiene como efectos prácticos aumentar la legibilidad. 
	Es más, en ocasiones sería muy bueno permitir case-insensitive para aumentar claridad.
	
	Es posible que en otros casos esté justificado, pero en STxT parece justo lo contrario. 
	Siempre nos preocupamos por la semántica, y claramente los nombres tienen
	el mismo significado en mayúsculas que en minúsculas.
h2:
	Codificación UTF-8
	
text:
	Este problema ha sido intrínseco a la informática durante muchos años.
	Que yo recuerde ha estado siempre, y siempre ha sido una fuente de problemas.
	Creo que STxT debería tener una única codificación, para evitar tener que decir
	en el documento cuál es. Además, ésta debe ser fácilmente entendida en el mundo de Internet,
	por lo cual creo que no hay lugar a dudas.
	
assert:
	Los documentos se codificarán en UTF-8
	
text:
	Es una buena regla y estoy muy contento con ella. Hoy en día es la codificación más aceptable,
	más universal, y más implementada. No creo que esto cambie en los próximos años. 
	
h2:
	Tabuladores o espacios
	
text:
	Vamos a explicar una //recomendación// cuando escribamos documentos en STxT. 
	
	No es una regla, después explicaremos por qué con más detalle, pero os recomiendo //encarecidamente// que la uséis.
	
assert:
	Los nodos de un documento deben crearse mediante tabuladores.
	Se permite, pero no se recomiendan espacios,
	y se desaconseja encarecidamente mezclarlos.
	
text:			
	Esto es una regla práctica, y espero que los programas y editores de texto 
	que se usen para crearlo la sigan, pero no siempre contaremos con esta ayuda.
	Por esto, vamos a explicar cómo se cuentan los niveles cuando aparecen tabuladores y espacios.
	
	La regla básica a recordar es:
	
assert:
	"4 Espacios" = "1 Tabulador"
	
text:			
	Así, cuando se cuentan niveles, 1 tabulador hace subir un nivel, 
	y 4 espacios también. Pero, si no se llega a 4 espacios y aparece otro carácter,
	los espacios anteriores no habrán hecho subir de nivel.
	Esto nos permite percibir de forma visual el número correcto de niveles
	(en la mayoría de editores).
		
	Vamos a poner ejemplos de contar niveles:
	
code:
	s: espacio
	t: tabulador
	
	t    t    t    t    XXXX: Elemento XXXX, Nivel 4
	ssss ssss ssss ssss YYYY: Elemento YYYY, Nivel 4
	ssst sst  st   t    ZZZZ: Elemento ZZZZ, Nivel 4
	
text:				
	Vemos que esto es coherente con la mayoría de editores de texto;
	siempre que se configure con la opción de "1 tabulador = 4 espacios".
	
h1:
	Texto (**)
	
text:
	Escribir texto en STxT parece fácil... ¡y en realidad lo es! :-)
	
	Pero (siempre hay un pero) a veces queremos comprender exactamente cómo funciona
	y ver los casos más especiales y como se interpretan. 
	Si éste es tu caso, sigue leyendo. Estás en el lugar adecuado ;-)
	
	//Estas reglas están sobretodo enfocadas al parseo de textos y a la interpretación
	informática. Cuando escribimos STxT sólo hay que tener en cuenta la identación y
	los niveles, y seguir nuestra intuición.//
h2:
	Todo sobre Identación
	
text:
	La identación en texto tiene algunas sutilezas que vamos a enseñar, y lo haremos con ejemplos.
	
assert:
	Si la línea donde empieza el nodo está vacía \\
	no se debería tener en cuenta el salto de línea.
	
text:				
	Esto es razonable, ya que nos permite hacer textos bonitos, todo alineado.
	Por ejemplo, los siguientes nodos son equivalentes:
	
code:
	Text Node: Lorem ipsum dolor sit amet, sicing elit, sed do eiusmod
		tempor incididunt ut dolore magna aliqua. Ut enim ad minim veniam,
		quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea 
		commodo consequat. Duis aute irur in reprehenderit in voluptate
		velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
		occaecat cupidatat non proident, sunt in culpa qui officia deserunt
		mollit anim id est laborum.
	
	Text Node:
		Lorem ipsum dolor sit amet, sicing elit, sed do eiusmod
		tempor incididunt ut dolore magna aliqua. Ut enim ad minim veniam,
		quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea 
		commodo consequat. Duis aute irur in reprehenderit in voluptate
		velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
		occaecat cupidatat non proident, sunt in culpa qui officia deserunt
		mollit anim id est laborum.
	
text:
	Se ve que el segundo nodo es más bonito, y tiene el mismo contenido que el primero.
	Si realmente se quisiera que la 1ª línea fuera en blanco, se debería hacer lo siguiente:
	
code:
	Text Node:
	
		Lorem ipsum dolor sit amet, sicing elit, sed do eiusmod
		tempor incididunt ut dolore magna aliqua. Ut enim ad minim veniam,
		quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea 
		commodo consequat. Duis aute irur in reprehenderit in voluptate
		velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
		occaecat cupidatat non proident, sunt in culpa qui officia deserunt
		mollit anim id est laborum.
	
text:
	Otra regla importante, es que //las líneas en blanco intermedias// no tienen por qué
	llegar al nivel del texto, y seguirán contando como líneas en blanco.
	
	Esto también es una función estética e intuitiva, y lo hemos tenido en cuenta.
	Así, los siguientes nodos también son equivalentes:
	
code:
	t    t    Text Node:
	t    t    t    xxxxxxx
	t    t    t    
	t    t    t    zz zz
	
	t    t    Text Node:
	t    t    t    xxxxxxx
	t    t    
	t    t    t    zz zz
	
	t    t    Text Node:
	t    t    t    xxxxxxx
	t 
	t    t    t    zz zz
	
	t    t    Text Node:
	t    t    t    xxxxxxx
	
	t    t    t    zz zz
	
text:
	Todos hacen un texto //xxxxxxx//, seguido de una línea en blanco y con otra con //zz zz//.
	
h2:
	Todo sobre comentarios
	
text:
	Los comentarios son muy útiles, y ya conocemos su funcionamiento:
	
assert:
	Los comentarios son las líneas que empiezan por #, aunque tengan espacios o tabuladores delante.
	
text:
	Pero vamos a discutir algo importante. Esta regla no es del todo completa. Falta matizar:
	
assert:
	Los comentarios son las líneas que empiezan por #, aunque tengan espacios o tabuladores	delante; 
	siempre y cuando no estén en un nodo texto y hayan llegado a su nivel.
	
text:		
	Mejor un ejemplo:
	
code:
		Nodo Texto:
			aaaa
			bbbb
			cccc
	# Un comentario, no se incluye en el texto (nivel 0)
		# Un comentario, no se incluye en el texto (nivel 1)
			# ¡¡ESTA LÍNEA SÍ QUE SE INCLUYE!!
			# Ya está dentro del texto (nivel 2!).
			# Ya no es un comentario.
				# Esto tampoco es un comentario :-D
			dddd
			eeee
	
text:
	Vemos que de las 6 líneas que parecen comentarios sólo lo son las 2 primeras,
	con un nivel inferior o igual al nodo de texto correspondiente.
	
	En cambio, fuera de un nodo texto //no importa//, pero se desaconseja:
	
code:
	Nodo Normal:
		# Comentario
			# También es un comentario, aunque NO es bonito :-(
			# Mejor evitar estos comentarios tan desalineados
		Otro nodo:
			Otro nodo:
	
h2:
	Texto en el texto
	
text:
	Bien, ésta es una de las cosas que más me gustan de STxT:
	Permite hacer texto de otros lenguajes //¡sin tener que parsear nada!//.
	¡Sólo hay que tener en cuenta las reglas de identación y ya está!
	Se puede escribir lo que queramos. A ver cuántos lenguajes pueden decir lo mismo :-D 
	
	Vamos a hacer ejemplos, ya que no hay nada más que añadir ;-)
	
code:
	Nodo con XML:
		<tag1>
			<tag2>Contenido !!!!</tag2>
			<tag2>Otro Contenido !!!!</tag2>
		</tag1>
	
code:	
	Nodo con Texto Wiki:
		Esto es una lista:
		
		* Elem 1
		* Elem 2
			** Elem 2.1
			** Elem 2.2
	
code:
	Nodo con Latex:
		\begin{equation}
			y_{i+1} = x_{i}^{2n} - \sqrt{5}x_{i-1}^{n} + \sqrt{x_{i-2}^7} -1
		\end{equation}
	
h1:
	Namespaces, nodos y más nodos (**)
	
text:
	Me gustaría volver a dar un poco de vueltas a los nodos, 
	la deducción de los namespaces y documentos con nodos de diferentes namespaces.
	Supongo que a este nivel ya está claro este tema, pero para dejar claros
	los conceptos voy a repetirme un poco. Espero no liaros, realmente todo es fácil y sencillo.
	Pero no estoy tranquilo si no lo hago ;-)
	
h2:
	¿Qué es un namespace?
	
text:
	Un namespace es una agrupación de definición de nodos y la descripción
	del namespace está siempre disponible en Internet como documento STxT;
	mediante una url de acceso.
	
	Por ejemplo, el namespace "www.gym.demo/client.stxt" puede definir 4 tipos de nodo:
	
	* Cliente
	* Empleado
	* Número de Cuenta
	* Nombre 
	
	Ya está. Tenemos una relación en la que ligamos el namespace //www.gym.demo/client.stxt//
	con sus nodos: //Cliente, Empleado, Número de Cuenta y Nombre//.
	
	Y ahora viene lo divertido. En el namespace también se dice qué hijos puede tener cada nodo,
	y los hijos pueden ser de cualquier namespace, no tienen por qué estar en el mismo.
	
	Así, se podría decir que //Cliente// tiene los siguientes hijos:
	
	* Nombre (del mismo namespace, www.gymdemo.org/client.stxt)
	* Entrenamiento (de otro namespace con la misma url base, www.gym.demo/gymdata.stxt)
	* Confidencial (de otro namespace con otra url, www.security.demo/credentials.stxt)
		
	Lo mismo podríamos hacer con todos los otros nodos.
	
h2:
	¿Qué es un documento STxT?
	
text:
	Un documento STxT es un conjunto de nodos anidados.
	El primer nodo es el que contiene a los demás, 
	y sólo puede haber un nodo principal. 
	Este nodo principal especifica su namespace, 
	y este hecho hace que todos los demás nodos tengan especificado
	su namespace de forma automática,
	a través de todas las definiciones posteriores.
	
	Pero además, como hemos visto antes,
	cada nodo puede pertenecer a un namespace diferente.
	
	Así, en el ejemplo anterior que estábamos haciendo, 
	podemos construir el documento de //Cliente// como:
	
code:
	Cliente (www.gymdemo.org/client.stxt):
		# Del mismo namespace
		Nombre: 
		
		# De otro namespace, pero no hace falta especificar, 
		# se deduce de la gramática
		Entrenamiento:
		
		# De otro namespace, también sin especificar
		Confidencial:
		
text:
	Lo importante de esto es que el documento es simple,
	pero gracias a las gramáticas y definiciones sabemos exactamente
	qué es cada elemento, de una forma muy sencilla.
	Y sólo hemos tenido que decir cuál es el elemento principal.

h2:
	Restricciones en los nodos hijos
	 
text:
	Debido a la deducción automática del namespace, los
	nombres (+ los alias) de los nodos hijos no pueden colisionar
	entre sí. En caso de colisión no se podría deducir
	correctamente el namespace al cual pertenecen.
	

